openapi: '3.0.3'
info:
  title: ATLAS Service Template - feed_data
  description: Get planned and actual ration data and allow to send new ration advices into the system.
  version: 0.0.2
security:
  - bearerAuth: []
paths:
  /rations:
    get:
      description: Get overview over stored rations
      parameters:
        - name: date_start
          in: query
          description: Planned start date of ration for filtering data, ISO8601
          schema:
            type: string
            format: date-time
        - name: date_end
          in: query
          description: Planned end date of ration for filtering data, ISO8601
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: ok
          content:  
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/RationAdvice'
    post:
      description: Send a ration-advice and create a new ration with that
      requestBody:
        content:
          aplication/json:
            schema:
                type: array
                items: 
                  $ref: '#/components/schemas/RationAdvice'
      responses:
        201:
          description: |-
            ok
            todo: add ration-id to response. can be set in body, if not one will be generated
  /rations/{id}:
    get:
      description: Get overview over stored rations
      parameters:
        - name: id
          in: path
          description: ration-id
          required: true
          schema: 
            type: string
      responses:
        200:
          description: ok
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/RationAdvice'

  /rations/feedingreport:
    get:
      description: Insert an actual feeding as event into the system
      parameters:
        - name: date_start
          in: query
          description: Start date for filtering data, ISO8601
          required: true
          schema:
            type: string
            format: date-time
        - name: date_end
          in: query
          description: End date for filtering data, ISO8601
          required: true
          schema:
            type: string
            format: date-time
        - name: ration_id
          in: query
          description: if given, just return feedingreports for a single ration
          schema:
            type: string
      responses:
        200:
          description: ok
          content:  
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/FeedingReport'         
      

components:
  schemas:
    URN:
      type: string
      pattern: "^urn:[a-z][a-z0-9_.\\-]*:[\\w-.]+"
      description: 'Uniform resource name of an object with the syntax `urn:<service_id>:<internal_id>`. <service_id> must be the urn of a valid and active ATLAS service.'

    RationAdvice:
      type: object
      properties:
        id:
          type: string
        date:
          type: string
          format: date-time
          description: date-time of feeding for type FEEDED or date from where on this ration is planned to be feeded.
        total_drymatter:
          type: number
          description: total amount of drymatter which has to load for all animals in the pens in kg
          example: 729
        total_freshmatter:
          type: number
          description: total amount of freshmatter which has to load for all animals in the pens in kg
          example: 818.9
        pen_distribution:
          type: array
          items: 
            type: object
            properties:
              pen_urn:
                $ref: '#/components/schemas/URN'
              total_freshmatter:
                type: number
                description: total amount of freshmatter calculated out of feedstuff-amounts, number animals and feed_adaption, this part should be unloaded in this pen in kg
                example: 818.9
              number_animals:
                type: integer
                description: current number of animals in that pen
                example: 45
              feed_adaption:
                type: number
                description: depending on weather or other environment factors the amount unloaded here can be adapted here in %
                example: -10
            additionalProperties: false
            required: [pen_urn, total_freshmatter]
        feedstuffs:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: internal id
              name:
                type: string
              type:
                type: string
                enum: [ROUGHAGE, CONCENTRATE, MINERALS, WATER]
                description: type of feedstuff
              drymatter_percentate:
                type: number
                minimum: 0
                maximum: 100
                description: percentage drymatter of freshmatter
                example: 89
              amount_drymatter:
                type: number
                minimum: 0
                description: amount of drymatter per animal and day in the ration
                example: 18
              amount_freshmatter:
                type: number
                minimum: 0
                description: amount of freshmatter per animal and day in the ration
                example: 20.22
            required: [id, name, type, amount_freshmatter]

    FeedingLoadExternalDTO:
      type: object
      properties:
        actualLoadedAmountKg:
          type: number
          description: Actual amount loaded in mixer wagon (unit = KG)
          format: double
          example: 1980.0
        amountPerLoadKg:
          type: number
          description: Amount that should be loaded in mixer wagon (unit = KG)
          format: double
          example: 2000.0
        id:
          type: integer
          description: Feeding load ID
          format: int64
          example: 452
        loadDetails:
          $ref: '#/components/schemas/LoadingDetailsExternalDTO'
        loadPosition:
          type: integer
          description: Feeding load position used for ordering feeding loads
          format: int32
          example: 0
        status:
          type: integer
          description: 'Feeding load status enum 0 = TO DO, 1 = IN PROGRESS , 2 =
            DONE '
          format: int32
          example: 0
        unloads:
          type: array
          description: Unloads from feeding load per pen
          items:
            $ref: '#/components/schemas/UnloadExternalDTO'
    FeedingLoadIngredientExternalDTO:
      type: object
      properties:
        calculatedAmountKg:
          type: number
          description: Calculated amount of feed in feeding load (unit KG)
          format: double
          example: 780.0
        feedName:
          type: string
          description: Feed name
          example: Alfalfa Meal, 17% CP
        id:
          type: integer
          description: Loading ID
          format: int64
        loadedAmountKg:
          type: number
          description: Actual amount of ingredient in feeding load (unit KG)
          format: double
          example: 750.0
    FeedingReportExternalDTO:
      type: object
      properties:
        feedingLoads:
          type: array
          description: Feeding loads for given feeding
          items:
            $ref: '#/components/schemas/FeedingLoadExternalDTO'
        feedingNumber:
          type: integer
          description: Feeding number enum value 1 = MORNING FEEDING , 2 = NOON FEEDING,
            3 = EVENING FEEDING
          format: int32
          example: 1
        id:
          type: integer
          description: Feeding ID
          format: int64
          example: 256
        pens:
          type: array
          description: Pens included in feeding
          items:
            $ref: '#/components/schemas/PenExternalDTO'
        status:
          type: integer
          description: Feeding status enum value 0 = TO DO , 1 = IN PROGRESS , 2 =
            DONE
          format: int32
          example: 0
    LoadingDetailsExternalDTO:
      type: object
      properties:
        endDate:
          type: string
          description: Loading finish date and time (UTC time)
          example: 2020-11-06T09:35:53Z
        ingredients:
          type: array
          description: Loaded ingredients in mixer wagon
          items:
            $ref: '#/components/schemas/FeedingLoadIngredientExternalDTO'
        mixerWagon:
          $ref: '#/components/schemas/MixerWagonExternalDTO'
        startDate:
          type: string
          description: Loading start date and time (UTC time)
          example: 2020-11-06T08:35:53Z
    MixerWagonExternalDTO:
      type: object
      description: interesting enough to return this information? because it cannot be setted anywhere
      properties:
        id:
          type: integer
          description: Mixer wagon ID
          format: int64
          example: 478
        imageUrl:
          type: string
          description: Mixer wagon image url
        name:
          type: string
          description: Mixer wagon name
          example: USA x 15
        weight:
          type: number
          description: Loading start date and time (unit Tonnes)
          format: double
          example: 2.0
    PenExternalDTO:
      type: object
      properties:
        feedIntakePerAnimalKg:
          type: number
          description: Feed intake per animal (unit KG)
          format: double
        id:
          type: integer
          description: Pen ID
          format: int64
          example: 12
        numberOfAnimals:
          type: integer
          description: Number of animals in pen
          format: int32
          example: 100
        penName:
          type: string
          description: Pen name
          example: Test pen
    UnloadExternalDTO:
      type: object
      properties:
        endDate:
          type: string
          description: Unloading finish date and time (UTC time)
          example: 2020-11-06T09:35:53Z
        id:
          type: integer
          description: Unload ID
          format: int64
          example: 5244
        penId:
          type: integer
          description: Pen ID
          format: int64
          example: 68
        startDate:
          type: string
          description: Unloading start date and time (UTC time)
          example: 2020-11-06T08:35:53Z
        status:
          type: integer
          description: Unloading status enum 0 = TO DO 1 = IN PROGRESS 2 = DONE
          format: int32
          example: 0
        unloadedAmountKg:
          type: number
          description: Unloaded amount in pen from feeding load (unit KG)
          format: double
          example: 900.0
    FeedingReport:
      type: object
      properties:
        feedingDate:
          type: string
          description: 'Feeding date '
          example: 2020-11-05
        feedings:
          type: array
          description: Daily feedings for recipe
          items:
            $ref: '#/components/schemas/FeedingReportExternalDTO'
        herdId:
          type: integer
          description: Herd ID
          format: int64
          example: 245
        ration_id:
          type: string
          description: ration_id, should be unique between vendors, like UUID
          example: 4bef73d1-f7f4-492e-a268-5f698a09cf4b
        ration_name:
          type: string
          description: Ration name
          example: high yield summer 23

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
